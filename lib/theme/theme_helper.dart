import 'package:custom_halal_app/core/utils/size_utils.dart';
import 'package:custom_halal_app/theme/pref_utils.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generatorif (!_supportedCustomColor.containsKey(_appTheme)){  throw Exception(               "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");      } //return theme from map
    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator if (!_supportedColorScheme.containsKey(_appTheme)){   throw Exception(                "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");       }  //return theme from map
    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          shadowColor: appTheme.gray90028,
          elevation: 6,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.surface;
        }),
        side: const BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
    bodyLarge: TextStyle(
      color: appTheme.blueGray90002,
      fontSize: 16.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    bodyMedium: TextStyle(
      color: appTheme.blueGray90001,
      fontSize: 14.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    bodySmall: TextStyle(
      color: appTheme.gray700,
      fontSize: 12.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w400,
    ),
    displayMedium: TextStyle(
      color: const Color(0XFFF9F9F9),
      fontSize: 48.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w700,
    ),
    headlineLarge: TextStyle(
      color: appTheme.whiteA700,
      fontSize: 32.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w600,
    ),
    headlineMedium: TextStyle(
      color: appTheme.gray90003,
      fontSize: 26.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w600,
    ),
    headlineSmall: TextStyle(
      color: appTheme.gray90006,
      fontSize: 24.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w600,
    ),
    titleLarge: TextStyle(
      color: appTheme.gray90006,
      fontSize: 22.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w600,
    ),
    titleMedium: TextStyle(
      color: colorScheme.primary,
      fontSize: 16.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w700,
    ),
    titleSmall: TextStyle(
      color: appTheme.blueGray90001,
      fontSize: 14.fSize,
      fontFamily: 'Inter',
      fontWeight: FontWeight.w600,
    ),
  );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = const ColorScheme.light(
    // Primary colors
    primary: Color(0XFF0D8335),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => const Color(0XFFCFD1D0);
  Color get blueGray400 => const Color(0XFF888888);
  Color get blueGray90001 => const Color(0XFF2D2D2D);
  Color get blueGray90002 => const Color(0XFF333333);

  // Gray
  Color get gray20001 => const Color(0XFFF0F0F0);
  Color get gray50 => const Color(0XFFF9F9F9);
  Color get gray500 => const Color(0XFF9E9C9D);
  Color get gray60002 => const Color(0XFF707070);
  Color get gray700 => const Color(0XFF666666);
  Color get gray70002 => const Color(0XFF5C5C5C);
  Color get gray800 => const Color(0XFF3C3C3C);
  Color get gray80002 => const Color(0XFF424242);
  Color get gray80003 => const Color(0XFF4C4C4C);
  Color get gray90003 => const Color(0XFF282828);
  Color get gray90004 => const Color(0XFF232323);
  Color get gray90006 => const Color(0XFF242424);
  Color get gray90028 => const Color(0X281F1F1F);

  // Green
  Color get green100 => const Color(0XFFB7E1C5);
  Color get green200 => const Color(0XFF9ECDAE);
  Color get green50 => const Color(0XFFE1EFE6);
  Color get green600 => const Color(0XFF379B59);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();